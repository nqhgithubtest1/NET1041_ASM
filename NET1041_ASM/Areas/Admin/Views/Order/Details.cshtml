@using NET1041_ASM.Models
@model Order

<div class="container-xxl flex-grow-1 container-p-y">
    <h4 class="fw-bold py-3 mb-4">
        <span class="text-muted fw-light">Admin/</span> Order Details #@Model.OrderID
    </h4>

    @if (TempData["SuccessMessage"] != null)
    {
        <div class="alert alert-success">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="alert alert-danger">
            @TempData["ErrorMessage"]
        </div>
    }

    <!-- Order Summary -->
    <div class="row mb-4">
        <div class="col-md-6">
            <p><strong>Order ID:</strong> @Model.OrderID</p>
            <p><strong>Order Time:</strong> @Model.OrderTime.ToString("dd/MM/yyyy HH:mm:ss")</p>
            <p><strong>Customer Username:</strong> @Model.User.Username</p>
            <p><strong>Email:</strong> @Model.User.Email</p>
        </div>
        <div class="col-md-6 text-end">
            <p>
                <strong>Status:</strong>
                <span class="badge
                    @(Model.Status == OrderStatus.Pending ? "badge-pending" :
                      Model.Status == OrderStatus.Shipping ? "badge-shipping" :
                      Model.Status == OrderStatus.Completed ? "badge-completed" :
                      Model.Status == OrderStatus.Cancelled ? "badge-cancelled" : "")">
                    @Model.Status
                </span>
            </p>
            <p><strong>Total Amount:</strong> <span class="text-success">@Model.TotalAmount.ToString("N0") VND</span></p>
        </div>
    </div>

    <!-- Update Order Status -->
    <div class="row mb-4">
        <div class="col-md-12">
            <form asp-action="UpdateNextStatus" asp-controller="Order" method="post" data-confirm="Are you sure you want to process this order?">
                <input type="hidden" name="OrderID" value="@Model.OrderID" />
                <label for="Status" class="form-label"><strong>Update Status:</strong></label>

                <!-- Timeline -->
                <div class="timeline-container mt-3">
                    @foreach (var status in Enum.GetValues(typeof(OrderStatus)).Cast<OrderStatus>())
                    {
                        var statusClass = status switch
                        {
                            OrderStatus.Pending => "badge-pending",
                            OrderStatus.Shipping => "badge-shipping",
                            OrderStatus.Completed => "badge-completed",
                            OrderStatus.Cancelled => "badge-cancelled",
                            _ => ""
                        };

                        <div class="timeline-step @(Model.Status == status ? "active" : Model.Status > status ? "completed" : "")">
                            <input type="radio" name="Status" id="Status_@status" value="@status"
                                   class="d-none status-radio" @(Model.Status == status ? "checked" : "") />
                            <label for="Status_@status" class="timeline-label">
                                <div class="timeline-circle @statusClass">
                                    <i class="fa @(Model.Status >= status ? "fa-check" : "fa-circle")"></i>
                                </div>
                                <span class="timeline-text">@status</span>
                            </label>
                        </div>
                    }
                </div>
                @if (Model.Status == OrderStatus.Pending || Model.Status == OrderStatus.Shipping)
                {
                    if (Model.Status == OrderStatus.Pending)
                    {
                        <button type="submit" class="btn btn-primary mt-4">Ship</button>
                    }
                    if (Model.Status == OrderStatus.Shipping)
                    {
                        <button type="submit" class="btn btn-primary mt-4">Complete</button>
                    }
                }
            </form>
        </div>
    </div>

    <!-- Cancel Order Button -->
    @if (Model.Status == OrderStatus.Pending)
    {
        <div class="text-right mb-4">
            <form asp-action="Cancel" asp-controller="Order" method="post" data-confirm="Are you sure you want to cancel this order?">
                <input type="hidden" name="orderId" value="@Model.OrderID" />
                <button type="submit" class="btn btn-danger">
                    <i class="fa fa-times"></i> Cancel Order
                </button>
            </form>
        </div>
    }

    <!-- Order Items -->
    <div class="card">
        <div class="card-header">
            <h5>Order Items</h5>
        </div>
        <div class="card-body">
            <table class="table table-bordered">
                <thead>
                    <tr>
                        <th>No</th>
                        <th style="width: 50px;">Image</th>
                        <th>Item</th>
                        <th>Type</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Subtotal</th>
                    </tr>
                </thead>
                <tbody>
                    @{
                        var count = 1;
                    }
                    @foreach (var detail in Model.OrderDetails)
                    {
                        <tr>
                            <td>@(count++)</td>
                            <td>
                                @if (detail.FoodItem != null)
                                {
                                    <img src="/@Url.Content(detail.FoodItem.ImagePath)" alt="@detail.FoodItem.Name" class="img-fluid rounded" style="width: 50px; height: 50px;">
                                }
                                else if (detail.Combo != null)
                                {
                                    <img src="/@Url.Content(detail.Combo.ImagePath)" alt="@detail.Combo.Name" class="img-fluid rounded" style="width: 50px; height: 50px;">
                                }
                            </td>
                            <td>
                                @if (detail.FoodItem != null)
                                {
                                    <strong>@detail.FoodItem.Name</strong>
                                    <p class="text-muted">@detail.FoodItem.Description</p>
                                }
                                else if (detail.Combo != null)
                                {
                                    <strong>@detail.Combo.Name</strong>
                                    <p class="text-muted">@detail.Combo.Description</p>
                                }
                            </td>
                            <td>
                                @if (detail.FoodItem != null)
                                {
                                    <span class="badge badge-primary">Food Item</span>
                                }
                                else if (detail.Combo != null)
                                {
                                    <span class="badge badge-secondary">Combo</span>
                                }
                            </td>
                            <td>@detail.Quantity</td>
                            <td>@detail.Price.ToString("N0") VND</td>
                            @{
                                var subtotal = detail.Price * detail.Quantity;
                            }
                            <td>@subtotal.ToString("N0") VND</td>
                        </tr>
                    }
                </tbody>
                <tfoot>
                    <tr>
                        <td colspan="6" class="text-end"><strong>Total:</strong></td>
                        <td>@Model.TotalAmount.ToString("N0") VND</td>
                    </tr>
                </tfoot>
            </table>
        </div>
    </div>

    <!-- Back Button -->
    <div class="text-end mt-4">
        <a href="@Url.Action("Index", "Order")" class="btn btn-secondary">
            <i class="fa fa-arrow-left"></i> Back to Orders
        </a>
    </div>
</div>

<style>
    .badge-pending {
        background-color: #ffc107; /* Yellow */
        color: #fff;
    }

    .badge-shipping {
        background-color: #17a2b8; /* Blue */
        color: #fff;
    }

    .badge-completed {
        background-color: #28a745; /* Green */
        color: #fff;
    }

    .badge-cancelled {
        background-color: #dc3545; /* Red */
        color: #fff;
    }

    .badge-primary {
        background-color: #007bff; /* Primary Blue */
        color: #fff; /* White text */
        padding: 5px 10px; /* Padding for badge */
        border-radius: 12px; /* Rounded corners */
        font-size: 12px; /* Font size */
        font-weight: bold; /* Bold text */
        text-transform: uppercase; /* Uppercase text */
        display: inline-block; /* Inline-block for better styling */
    }

    .badge-secondary {
        background-color: #6c757d; /* Secondary Gray */
        color: #fff; /* White text */
        padding: 5px 10px; /* Padding for badge */
        border-radius: 12px; /* Rounded corners */
        font-size: 12px; /* Font size */
        font-weight: bold; /* Bold text */
        text-transform: uppercase; /* Uppercase text */
        display: inline-block; /* Inline-block for better styling */
    }

    .badge-primary:hover {
        background-color: #0056b3; /* Darker Blue on hover */
        color: #f8f9fa; /* Slightly lighter white */
    }

    .badge-secondary:hover {
        background-color: #545b62; /* Darker Gray on hover */
        color: #f8f9fa; /* Slightly lighter white */
    }
</style>

<style>
    /* Timeline Container */
    .timeline-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        position: relative;
        padding: 20px 0;
        margin-top: 10px;
    }

    /* Timeline Step */
    .timeline-step {
        text-align: center;
        flex: 1;
        position: relative;
    }

    /* Timeline Label */
    .timeline-label {
        display: inline-block;
        text-align: center;
        color: #6c757d;
        font-size: 14px;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.3s;
    }

    /* Active Step */
    .timeline-step.active .timeline-label,
    .timeline-step.completed .timeline-label {
        font-weight: bold;
    }

    /* Timeline Circle */
    .timeline-circle {
        width: 40px;
        height: 40px;
        margin: 0 auto;
        border: 3px solid #6c757d; /* Grey */
        border-radius: 50%;
        display: flex;
        justify-content: center;
        align-items: center;
        background-color: white;
        color: #6c757d;
        font-size: 16px;
        transition: all 0.3s;
    }

        /* Pending Status */
        .timeline-circle.badge-pending {
            background-color: #ffc107; /* Yellow */
            border-color: #ffc107;
        }

        /* Shipping Status */
        .timeline-circle.badge-shipping {
            background-color: #17a2b8; /* Blue */
            border-color: #17a2b8;
        }

        /* Completed Status */
        .timeline-circle.badge-completed {
            background-color: #28a745; /* Green */
            border-color: #28a745;
        }

        /* Cancelled Status */
        .timeline-circle.badge-cancelled {
            background-color: #dc3545; /* Red */
            border-color: #dc3545;
        }


    /* Connector Line */
    .timeline-container::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 0;
        right: 0;
        height: 3px;
        background-color: #dee2e6; /* Grey */
        z-index: -1;
    }

    /* Completed Connector */
    .timeline-step.completed + .timeline-step::before {
        background-color: #28a745; /* Green */
    }

    .timeline-step.completed + .timeline-step::after {
        background-color: #28a745; /* Green */
    }

    .timeline-step::before {
        content: "";
        position: absolute;
        top: 50%;
        left: 0;
        width: 50%;
        height: 3px;
        background-color: #dee2e6; /* Grey */
        z-index: -1;
        transition: all 0.3s;
    }

    .timeline-step::after {
        content: "";
        position: absolute;
        top: 50%;
        right: 0;
        width: 50%;
        height: 3px;
        background-color: #dee2e6; /* Grey */
        z-index: -1;
        transition: all 0.3s;
    }

    .timeline-step:first-child.active::after,
    .timeline-step:first-child.completed::after {
        background-color: #28a745; /* Green */
    }

    .timeline-step:first-child.active::before,
    .timeline-step:first-child.completed::before {
        background-color: #28a745; /* Green */
    }

    /* Adjust Connector for Completed Steps */
    .timeline-step.completed::before {
        background-color: #28a745; /* Green */
    }

    .timeline-step.completed::after {
        background-color: #28a745; /* Green */
    }

    /* Hover Effect */
    .timeline-label:hover {
        color: black;
    }

    .timeline-circle:hover {
        border-color: black;
        color: black;
    }
</style>